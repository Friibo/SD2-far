package lab3.foxesAndRabbits2;

import java.util.Iterator;
import java.util.List;
import java.util.Random;

import lab3.foxesAndRabbits2.Field;
import lab3.foxesAndRabbits2.Location;






public class Wolf extends Animal
{

    
    private int foxes;
    private int rabbits;
    private int successLevel;
    private int age;
    private int foodLevel;
    private static final int RABBIT_SUCCESS_VALUE = 1;
    private static final int FOX_SUCCESS_VALUE = 10;
    private static final int MAX_AGE = 100;
    private static final int BREEDING_AGE = 7;
    private static final int MAX_LITTER_SIZE = 3;
    private static final double BREEDING_PROBABILITY = 0.02;
    private static final int RABBIT_FOOD_VALUE = 4;
    private static final int FOX_FOOD_VALUE = 14;
    private static final Random rand = Randomizer.getRandom();
    /**
     * Create a new Wolf at location in field.
     * 
     * @param field The field currently occupied.
     * @param location The location within the field.
     */
    public Wolf(boolean randomAge, Field field, Location location)
    {
    	//inherits from Organism
    	super(field, location);
    	if(randomAge) {
            age = rand.nextInt(MAX_AGE);
            foodLevel = rand.nextInt(RABBIT_FOOD_VALUE + FOX_FOOD_VALUE);
        }
        else {
            age = 0;
            foodLevel = RABBIT_FOOD_VALUE + FOX_FOOD_VALUE;
        }
    }
    

    /**
     * @return The Wolfs's level of success.
     */
    protected int getSuccess()
    {
        return successLevel;
    }
    

    /**
     * This is what the Wolf does most of the time: it hunts for
     * foxes. The number of Wolfs is assumed to be constant to start with.
     */
	@Override
	public void act( List<Animal> newWolfs )
	{
		incrementHunger();
		incrementAge();
		if(isAlive()) {        
            // Move towards a source of prey if found.
            Location newLocation = findPrey();
            if(newLocation == null) { 
                // No prey found - try to move to a free location.
                newLocation = getField().freeAdjacentLocation(getLocation());
            }
            // See if it was possible to move.
            if(newLocation != null) {
                setLocation(newLocation);
            }
            else {
                // stay where you are
            }
        }
		
	}
	
	/**
    * Look for rabbits adjacent to the current location.
    * Only the first live rabbit is eaten.
    * @return Where food was found, or null if it wasn't.
    */
	private Location findPrey()
	{
		Field field = getField();
		List<Location> adjacent = field.adjacentLocations(getLocation());
		Iterator<Location> it = adjacent.iterator();
		while ( it.hasNext() )
		{
			Location where = it.next();
			Object animal = field.getObjectAt( where );
			if( animal instanceof Rabbit )
			{
				Rabbit rabbit = (Rabbit) animal;
				if( rabbit.isAlive() )
				{
					rabbit.setDead();
					successLevel = RABBIT_SUCCESS_VALUE;
					return where;
				}
			}
			if( animal instanceof Fox )
			{
				Fox fox = (Fox) animal;
				if( fox.isAlive() )
				{
					fox.setDead();
					successLevel = FOX_SUCCESS_VALUE;
					return where;
				}
			}
		}
		return null;
	}
	
	
	private void incrementHunger()
    {
        foodLevel--;
        if(foodLevel <= 0) {
            setDead();
        }
    }
	
	protected int breed()
    {
        int births = 0;
        if(canBreed() && rand.nextDouble() <= BREEDING_PROBABILITY) {
            births = rand.nextInt(MAX_LITTER_SIZE) + 1;
        }
        return births;
    }

	@Override
	protected int getBreedingAge()
	{
		return BREEDING_AGE;
	}
	
}
	



//	@Override
//	protected int getMaxAge()
//	{
//		return MAX_AGE;
//	}
//
//
//	@Override
//	public boolean isActive()
//	{
//		return isAlive();
//	}

